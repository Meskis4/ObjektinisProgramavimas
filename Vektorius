#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <random>
#include <cctype>
#include <string>
#include <fstream>
#include <sstream>

using namespace std;

struct Studentas {
    string vardas;
    string pavarde;
    int n;
    int egz;
    vector<int> nd;
    double vid;
    double galut;
    double medi;
    double pasirinkimas;
};

double Mediana(vector<int>& mas) {
    sort(mas.begin(), mas.end());

    if (mas.size() % 2 == 0) {
        double vidur1 = mas[mas.size() / 2 - 1];
        double vidur2 = mas[mas.size() / 2];
        return double((vidur1 + vidur2) / 2.0);
    }
    else {
        return double(mas[mas.size() / 2]);
    }
}

double raides(const string& str) {
    for (char c : str) {
        if (!isalpha(c)) {
            return false;
        }
    }
    return true;
}

int main()
{

    vector<string> Vardai_v = { "Petras", "Jonas", "Paulius", "Saulius", "Martynas", "Kornelijus", "Adomas", "Lukas", "Marius", "Kazimieras", "Dovydas", "Mantas", "Arnas", "Dziugas" };
    vector<string> Vardai_m = { "Eva", "Paulina", "Sofija", "Gintare", "Skaiste", "Marija", "Lukrecija", "Kornelija", "Egle", "Kamile", "Auguste", "Meda", "Ruta" };
    vector<string> Pavardes_v = { "Kazlauskas", "Vasiliauskas", "Petrauskas", "Paulauskas", "Urbonas", "Adomaitis", "Sadauskas", "Vaitkus", "Jankauskas", "Rimkus" };
    vector<string> Pavardes_m = { "Kazlauskaite", "Vasiliauskiene", "Paulauskyte", "Vaitkute", "Jankauskaite", "Rimkute", "Adomaitiene", "Petrauskyte" };
    vector<Studentas> studentai;


    int budas = 0;

    //
    while (budas != 1 || budas != 2 || budas != 3 || budas != 4) {
        cout << "******************************" << endl;
        cout << "Duomenu uzpildymo budas" << endl;
        cout << "1. Uzpildyti ranka" << endl;
        cout << "2. Uzpildyti pazymius automatiskai" << endl;
        cout << "3. Uzpildyti varda, pavarde bei pazymius automatiskai" << endl;
        cout << "4. Nuskaityti duomenis is failo" << endl;
        cout << "******************************" << endl;
        cout << "Jusu pasirinkimas: ";
        while (!(cin >> budas)) {
            cout << "*************************************" << endl;
            cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
            cout << "*************************************" << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Iveskite pazymi: ";
        }
        cout << "----------------------------------" << endl;
        if (budas != 1 && budas != 2 && budas != 3 && budas != 4) {
            cout << "Netinkamas pasirinkimas!" << endl;
        }
        else break;
    }

    // Pildymas ranka

    if (budas == 1) {
        while (true) {
            bool loop = false;
            Studentas S;
            S.pasirinkimas;
            cout << "Iveskite savo varda: "; cin >> S.vardas;

            while (!raides(S.vardas)) {
                cout << "*****************************" << endl;
                cout << "Prasome ivesti tik raides!" << endl;
                cout << "*****************************" << endl;
                cout << "Iveskite savo varda: "; cin >> S.vardas;
            }

            cout << "Iveskite savo pavarde: "; cin >> S.pavarde;

            while (!raides(S.pavarde)) {
                cout << "*****************************" << endl;
                cout << "Prasome ivesti tik raides!" << endl;
                cout << "*****************************" << endl;
                cout << "Iveskite savo pavarde: "; cin >> S.pavarde;
            }

            cout << "Iveskite egzamino bala: ";
            while (!(cin >> S.egz) || S.egz < 1 || S.egz > 10) {
                cout << "*************************************" << endl;
                cout << "Iveskite skaiciu nuo 1 iki 10." << endl;
                cout << "*************************************" << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Iveskite egzamino bala: ";
            }

            while (S.pasirinkimas != 1 || S.pasirinkimas != 2) {
                cout << "----------------------------------" << endl;
                cout << "Pasirinktie galutinio balo skaiciavimo metoda: " << endl;
                cout << "1. Skaiciuoti naudojant vidurki" << endl;
                cout << "2. Skaiciuoti naudojant mediana" << endl;
                cout << "Jusu pasirinkimas: ";
                while (!(cin >> S.pasirinkimas)) {
                    cout << "*************************************" << endl;
                    cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
                    cout << "*************************************" << endl;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "Jusu pasirinkimas:  ";
                }
                cout << "----------------------------------" << endl;
                if (S.pasirinkimas != 1 && S.pasirinkimas != 2) {
                    cout << "Netinkamas pasirinkimas!" << endl;
                }
                else break;
            }
            cout << "Iveskite atliktu namu darbu skaiciu: " << endl;
            while (!(cin >> S.n)) {
                cout << "*************************************" << endl;
                cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
                cout << "*************************************" << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Iveskite atliktu namu darbu skaiciu: " << endl;
            }
            S.nd.resize(S.n);
            int paz = 0;
            for (int j = 0; j < S.n; j++) {
                cout << "Iveskite pazymi: ";
                while (!(cin >> S.nd[j]) || S.nd[j] < 1 || S.nd[j] > 10) {
                    cout << "*************************************" << endl;
                    cout << "Iveskite skaiciu nuo 1 iki 10!" << endl;
                    cout << "*************************************" << endl;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "Iveskite pazymi: ";
                }
                paz += S.nd[j];
            }
            if (S.pasirinkimas == 1) {
                S.vid = double(paz) / S.n;
                S.galut = 0.4 * S.vid + 0.6 * S.egz;
            }
            else {
                S.medi = Mediana(S.nd);
                S.galut = 0.4 * S.medi + 0.6 * S.egz;
            }
            cout << "*******************************" << endl;
            studentai.push_back(S);
            int sk;
            cout << "0. Baigti" << endl;
            cout << "1. Testi" << endl;
            cin >> sk;
            if (sk == 0) {
                break;
            }
            else loop = true;
        }
    }

    // *************************************
    // Pazymiu automatinis pildymas

    if (budas == 2) {
        while (true) {
            bool loop = false;
            Studentas S;
            cout << "Iveskite savo varda: "; cin >> S.vardas;

            while (!raides(S.vardas)) {
                cout << "*****************************" << endl;
                cout << "Prasome ivesti tik raides!" << endl;
                cout << "*****************************" << endl;
                cout << "Iveskite savo varda: "; cin >> S.vardas;
            }

            cout << "Iveskite savo pavarde: "; cin >> S.pavarde;

            while (!raides(S.pavarde)) {
                cout << "*****************************" << endl;
                cout << "Prasome ivesti tik raides!" << endl;
                cout << "*****************************" << endl;
                cout << "Iveskite savo pavarde: "; cin >> S.pavarde;
            }

            random_device rd;
            mt19937 gen(rd());
            uniform_int_distribution<int> distribution(1, 10);
            S.egz = distribution(gen);
            while (S.pasirinkimas != 1 || S.pasirinkimas != 2) {
                cout << "----------------------------------" << endl;
                cout << "Pasirinktie galutinio balo skaiciavimo metoda: " << endl;
                cout << "1. Skaiciuoti naudojant vidurki" << endl;
                cout << "2. Skaiciuoti naudojant mediana" << endl;
                cout << "Jusu pasirinkimas: ";
                while (!(cin >> S.pasirinkimas)) {
                    cout << "*************************************" << endl;
                    cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
                    cout << "*************************************" << endl;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "Jusu pasirinkimas:  ";
                }
                cout << "----------------------------------" << endl;
                if (S.pasirinkimas != 1 && S.pasirinkimas != 2) {
                    cout << "Netinkamas pasirinkimas!" << endl;
                }
                else break;
            }
            cout << "Iveskite atliktu namu darbu skaiciu: ";
            while (!(cin >> S.n)) {
                cout << "*************************************" << endl;
                cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
                cout << "*************************************" << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Iveskite atliktu namu darbu skaiciu: " << endl;
            }
            S.nd.resize(S.n);
            int paz = 0;
            for (int j = 0; j < S.n; j++) {

                S.nd[j] = distribution(gen);
                paz += S.nd[j];
            }
            if (S.pasirinkimas == 1) {
                S.vid = double(paz) / S.n;
                S.galut = 0.4 * S.vid + 0.6 * S.egz;
            }
            else {
                S.medi = Mediana(S.nd);
                S.galut = 0.4 * S.medi + 0.6 * S.egz;
            }
            cout << "*******************************" << endl;
            studentai.push_back(S);
            int sk;
            cout << "0. Baigti" << endl;
            cout << "1. Testi" << endl;
            cin >> sk;
            if (sk == 0) {
                break;
            }
            else loop = true;
        }
    }

    //***************************************
    //Automatinis vardo bei pazymiu pildymas

    if (budas == 3) {
        while (true) {
            bool loop = false;
            Studentas S;

            random_device rd;
            mt19937 gen(rd());
            uniform_int_distribution<int> distribution(1, 10);
            uniform_int_distribution<int> lyties_num(0, 1); // 0 - vyras, 1 - moteris

            int lytis = lyties_num(gen);

            if (lytis == 0) {
                S.vardas = Vardai_v[uniform_int_distribution<int>(0, Vardai_v.size() - 1)(gen)];
                S.pavarde = Pavardes_v[uniform_int_distribution<int>(0, Pavardes_v.size() - 1)(gen)];
            }
            else {
                S.vardas = Vardai_m[uniform_int_distribution<int>(0, Vardai_m.size() - 1)(gen)];
                S.pavarde = Pavardes_m[uniform_int_distribution<int>(0, Pavardes_m.size() - 1)(gen)];
            }
            S.egz = distribution(gen);
            while (S.pasirinkimas != 1 || S.pasirinkimas != 2) {
                cout << "----------------------------------" << endl;
                cout << "Pasirinktie galutinio balo skaiciavimo metoda: " << endl;
                cout << "1. Skaiciuoti naudojant vidurki" << endl;
                cout << "2. Skaiciuoti naudojant mediana" << endl;
                cout << "Jusu pasirinkimas: " << endl;
                while (!(cin >> S.pasirinkimas)) {
                    cout << "*************************************" << endl;
                    cout << "Iveskite skaiciu 1 arba 2" << endl;
                    cout << "*************************************" << endl;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "Jusu pasirinkimas:  " << endl;
                }
                cout << "----------------------------------" << endl;
                if (S.pasirinkimas != 1 && S.pasirinkimas != 2) {
                    cout << "Iveskite skaiciu 1 arba 2" << endl;
                }
                else break;
            }
            cout << "Iveskite atliktu namu darbu skaiciu: ";
            while (!(cin >> S.n)) {
                cout << "*************************************" << endl;
                cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
                cout << "*************************************" << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Jusu pasirinkimas:  ";

            }
            S.nd.resize(S.n);
            int paz = 0;
            for (int j = 0; j < S.n; j++) {

                S.nd[j] = distribution(gen);
                paz += S.nd[j];
            }
            if (S.pasirinkimas == 1) {
                S.vid = double(paz) / S.n;
                S.galut = 0.4 * S.vid + 0.6 * S.egz;
            }
            else {
                S.medi = Mediana(S.nd);
                S.galut = 0.4 * S.medi + 0.6 * S.egz;
            }
            cout << "*******************************" << endl;
            studentai.push_back(S);
            int sk;
            cout << "0. Baigti" << endl;
            cout << "1. Testi" << endl;
            cin >> sk;
            if (sk == 0) {
                break;
            }
            else loop = true;
        }
    }

    // Nuskaitymas is failo

    if (budas == 4) {
        Studentas S;
        int rusiavimas = 0;

        while (rusiavimas != 1 || rusiavimas != 2 || rusiavimas != 3 || rusiavimas != 4 || rusiavimas != 5 || rusiavimas != 6 || rusiavimas != 7) {
            cout << "**************************************" << endl;
            cout << "Kaip norite surusiuoti rezultatus?" << endl;
            cout << "1. Pagal galutini pazymi (mazejanciai)" << endl;
            cout << "2. Pagal galutini pazymi (didejanciai)" << endl;
            cout << "3. Pagal varda (A -> Z)" << endl;
            cout << "4. Pagal varda (Z -> A)" << endl;
            cout << "5. Pagal pavarde (A -> Z)" << endl;
            cout << "6. Pagal pavarde (Z -> A)" << endl;
            cout << "7. Nerusiuoti" << endl;
            cout << "Jusu pasirinkimas: "; 

            while (!(cin >> rusiavimas)) {
                cout << "*************************************" << endl;
                cout << "Netinkamas formatas! Iveskite skaiciu." << endl;
                cout << "*************************************" << endl;
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Jusu pasirinkimas: ";
            }
            cout << "----------------------------------" << endl;
            if (rusiavimas != 1 && rusiavimas != 2 && rusiavimas != 3 && rusiavimas != 4 && rusiavimas != 5 && rusiavimas != 6 && rusiavimas != 7) {
                cout << "Netinkamas pasirinkimas!" << endl;
            }
            else break;
        }

        ifstream df("Kursiokai.txt");

        if (!df) {
            cerr << "Failo nepavyko atidaryti!" << endl;
            return 1;
        }

        string header;
        getline(df, header);

        while (true) {
            df >> S.pavarde >> S.vardas;

            if (df.eof()) {
                break;
            }

            S.nd.clear();
            for (int i = 0; i < 5; i++) {
                int tmp = 0;
                df >> tmp;
                S.nd.push_back(tmp);
            }

            df >> S.egz;

            

            int paz = 0;
            S.n = S.nd.size();

            for (int j = 0; j < S.n; j++) {
                paz += S.nd[j];
            }

            S.vid = double(paz) / S.n;
            S.medi = Mediana(S.nd);
            S.galut = 0.4 * S.vid + 0.6 * S.egz;

            studentai.push_back(S);
        }
        
        df.close();
        if (rusiavimas == 1) {
            sort(studentai.begin(), studentai.end(), [](const Studentas& a, const Studentas& b) {
                return a.galut > b.galut;
                });
        }

        if (rusiavimas == 2) {
            sort(studentai.begin(), studentai.end(), [](const Studentas& a, const Studentas& b) {
                return a.galut < b.galut;
                });
        }

        if (rusiavimas == 3) {
            sort(studentai.begin(), studentai.end(), [](const Studentas& a, const Studentas& b) {
                return a.vardas < b.vardas;
                });
        }

        if (rusiavimas == 4) {
            sort(studentai.begin(), studentai.end(), [](const Studentas& a, const Studentas& b) {
                return a.vardas > b.vardas;
                });
        }

        if (rusiavimas == 5) {
            sort(studentai.begin(), studentai.end(), [](const Studentas& a, const Studentas& b) {
                return a.pavarde < b.pavarde;
                });
        }

        if (rusiavimas == 6) {
            sort(studentai.begin(), studentai.end(), [](const Studentas& a, const Studentas& b) {
                return a.pavarde > b.pavarde;
                });
        }

        }

    cout << left << setw(15) << "Pavarde" << setw(15) << "Vardas" << setw(20) << "Galutinis (Vid.)  /" << setw(20) << "Galutinis (Med.)" << endl;
    cout << setfill('-') << setw(68) << "" << setfill(' ') << endl;
    for (const auto& S : studentai) {
        if (S.pasirinkimas == 1) {
            cout << left << setw(15) << S.pavarde << setw(15) << S.vardas << setw(20) << fixed << setprecision(2) << S.galut << endl;
        }
        else {
            cout << left << setw(15) << S.pavarde << setw(15) << S.vardas << setw(20) << " " << setw(20) << fixed << setprecision(2) << S.galut << endl;
        }
    }
}
